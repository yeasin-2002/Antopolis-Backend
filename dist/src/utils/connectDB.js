Object.defineProperty(exports,"__esModule",{value:true});Object.defineProperty(exports,"connectDB",{enumerable:true,get:function(){return connectDB}});const _mongoose=_interop_require_default(require("mongoose"));const _envs=require("./envs");function asyncGeneratorStep(gen,resolve,reject,_next,_throw,key,arg){try{var info=gen[key](arg);var value=info.value}catch(error){reject(error);return}if(info.done){resolve(value)}else{Promise.resolve(value).then(_next,_throw)}}function _async_to_generator(fn){return function(){var self=this,args=arguments;return new Promise(function(resolve,reject){var gen=fn.apply(self,args);function _next(value){asyncGeneratorStep(gen,resolve,reject,_next,_throw,"next",value)}function _throw(err){asyncGeneratorStep(gen,resolve,reject,_next,_throw,"throw",err)}_next(undefined)})}}function _interop_require_default(obj){return obj&&obj.__esModule?obj:{default:obj}}const connectDB=function(){var _ref=_async_to_generator(function*(){try{if(_mongoose.default.connection.readyState===1){console.log("Already connected to MongoDB");return}const conn=yield _mongoose.default.connect(_envs.databaseUrl);console.log(`âš¡ MongoDB connected: ${conn.connection.host}`)}catch(error){console.error(`ðŸš¨  Error: ${error.message}`);process.exit(1)}});return function connectDB(){return _ref.apply(this,arguments)}}();