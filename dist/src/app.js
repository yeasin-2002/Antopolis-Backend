Object.defineProperty(exports,"__esModule",{value:true});const _bodyparser=_interop_require_default(require("body-parser"));const _compression=_interop_require_default(require("compression"));const _cookieparser=_interop_require_default(require("cookie-parser"));const _cors=_interop_require_default(require("cors"));const _express=_interop_require_default(require("express"));require("express-async-errors");const _expressmongosanitize=_interop_require_default(require("express-mongo-sanitize"));const _helmet=_interop_require_default(require("helmet"));const _morgan=_interop_require_default(require("morgan"));const _middlewares=require("./middlewares");const _utils=require("./utils");const _router=require("./router");const _connectDB=require("./utils/connectDB");function asyncGeneratorStep(gen,resolve,reject,_next,_throw,key,arg){try{var info=gen[key](arg);var value=info.value}catch(error){reject(error);return}if(info.done){resolve(value)}else{Promise.resolve(value).then(_next,_throw)}}function _async_to_generator(fn){return function(){var self=this,args=arguments;return new Promise(function(resolve,reject){var gen=fn.apply(self,args);function _next(value){asyncGeneratorStep(gen,resolve,reject,_next,_throw,"next",value)}function _throw(err){asyncGeneratorStep(gen,resolve,reject,_next,_throw,"throw",err)}_next(undefined)})}}function _interop_require_default(obj){return obj&&obj.__esModule?obj:{default:obj}}const app=(0,_express.default)();app.use((0,_compression.default)());app.use((0,_cookieparser.default)());app.use(_bodyparser.default.json());app.use((0,_helmet.default)());app.use((0,_cors.default)());app.use((0,_expressmongosanitize.default)());app.use((0,_morgan.default)("dev"));app.use("/uploads",_express.default.static("uploads"));app.use("/animal",_router.animalRouter);app.use("/category",_router.categoryRouter);app.use("/",_router.rootRouter);app.use(_middlewares.notFoundHandler);app.use(_middlewares.defaultErrorHandler);app.listen(_utils.port,_async_to_generator(function*(){yield(0,_connectDB.connectDB)();console.log(`ðŸ”¥ Server running on http://localhost:${_utils.port}`)}));