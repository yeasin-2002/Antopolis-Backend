Object.defineProperty(exports,"__esModule",{value:true});function _export(target,all){for(var name in all)Object.defineProperty(target,name,{enumerable:true,get:all[name]})}_export(exports,{AddCategories:function(){return AddCategories},getCategories:function(){return getCategories}});const _model=require("../../model");const _responseHandler=require("../../utils/responseHandler");function asyncGeneratorStep(gen,resolve,reject,_next,_throw,key,arg){try{var info=gen[key](arg);var value=info.value}catch(error){reject(error);return}if(info.done){resolve(value)}else{Promise.resolve(value).then(_next,_throw)}}function _async_to_generator(fn){return function(){var self=this,args=arguments;return new Promise(function(resolve,reject){var gen=fn.apply(self,args);function _next(value){asyncGeneratorStep(gen,resolve,reject,_next,_throw,"next",value)}function _throw(err){asyncGeneratorStep(gen,resolve,reject,_next,_throw,"throw",err)}_next(undefined)})}}const getCategories=function(){var _ref=_async_to_generator(function*(req,res){const allCategories=yield _model.db.Category.find({});if(!allCategories)(0,_responseHandler.errorResponse)({res,message:"Categories not found"});return(0,_responseHandler.successResponse)({res,message:"Get Categories",data:allCategories})});return function getCategories(req,res){return _ref.apply(this,arguments)}}();const AddCategories=function(){var _ref=_async_to_generator(function*(req,res){const{name}=req.body;if(!name){return(0,_responseHandler.errorResponse)({res,message:"name is required"})}const checkName=yield _model.db.Category.findOne({name});if(checkName){return(0,_responseHandler.errorResponse)({res,message:` category with '${name}' already exists`})}const newCategory=yield _model.db.Category.create({name});if(!newCategory){return(0,_responseHandler.errorResponse)({res,message:"unable to add category"})}return(0,_responseHandler.successResponse)({res,message:"Category Added",data:newCategory})});return function AddCategories(req,res){return _ref.apply(this,arguments)}}();